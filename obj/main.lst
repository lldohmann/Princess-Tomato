                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _init_gfx
                                     13 	.globl _printMap
                                     14 	.globl _check_map
                                     15 	.globl _performantdelay
                                     16 	.globl _puts
                                     17 	.globl _printf
                                     18 	.globl _set_sprite_data
                                     19 	.globl _set_bkg_tiles
                                     20 	.globl _set_bkg_data
                                     21 	.globl _wait_vbl_done
                                     22 	.globl _joypad
                                     23 	.globl _joy
                                     24 	.globl _map_collision
                                     25 	.globl _player_metasprites
                                     26 	.globl _player_down
                                     27 ;--------------------------------------------------------
                                     28 ; special function registers
                                     29 ;--------------------------------------------------------
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area _DATA
      000000                         34 _joy::
      000000                         35 	.ds 1
                                     36 ;--------------------------------------------------------
                                     37 ; ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area _INITIALIZED
                                     40 ;--------------------------------------------------------
                                     41 ; absolute external ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area _DABS (ABS)
                                     44 ;--------------------------------------------------------
                                     45 ; global & static initialisations
                                     46 ;--------------------------------------------------------
                                     47 	.area _HOME
                                     48 	.area _GSINIT
                                     49 	.area _GSFINAL
                                     50 	.area _GSINIT
                                     51 ;--------------------------------------------------------
                                     52 ; Home
                                     53 ;--------------------------------------------------------
                                     54 	.area _HOME
                                     55 	.area _HOME
                                     56 ;--------------------------------------------------------
                                     57 ; code
                                     58 ;--------------------------------------------------------
                                     59 	.area _CODE
                                     60 ;src\main.c:9: void performantdelay(uint8_t numloops)
                                     61 ;	---------------------------------
                                     62 ; Function performantdelay
                                     63 ; ---------------------------------
      000000                         64 _performantdelay::
      000000 4F               [ 4]   65 	ld	c, a
                                     66 ;src\main.c:12: for (ii = 0; ii < numloops; ii++)
      000001 06 00            [ 8]   67 	ld	b, #0x00
      000003                         68 00103$:
      000003 78               [ 4]   69 	ld	a, b
      000004 91               [ 4]   70 	sub	a, c
      000005 D0               [20]   71 	ret	NC
                                     72 ;src\main.c:14: wait_vbl_done();
      000006 CDr00r00         [24]   73 	call	_wait_vbl_done
                                     74 ;src\main.c:12: for (ii = 0; ii < numloops; ii++)
      000009 04               [ 4]   75 	inc	b
                                     76 ;src\main.c:16: }
      00000A 18 F7            [12]   77 	jr	00103$
                                     78 ;src\main.c:42: char check_map(uint8_t x_pos, uint8_t y_pos)
                                     79 ;	---------------------------------
                                     80 ; Function check_map
                                     81 ; ---------------------------------
      00000C                         82 _check_map::
      00000C 4F               [ 4]   83 	ld	c, a
                                     84 ;src\main.c:44: return map_collision[y_pos][x_pos];
      00000D 16 00            [ 8]   85 	ld	d, #0x00
      00000F 6B               [ 4]   86 	ld	l, e
      000010 62               [ 4]   87 	ld	h, d
      000011 29               [ 8]   88 	add	hl, hl
      000012 29               [ 8]   89 	add	hl, hl
      000013 19               [ 8]   90 	add	hl, de
      000014 29               [ 8]   91 	add	hl, hl
      000015 19               [ 8]   92 	add	hl, de
      000016 11r36r00         [12]   93 	ld	de, #_map_collision
      000019 19               [ 8]   94 	add	hl, de
      00001A 59               [ 4]   95 	ld	e, c
      00001B 16 00            [ 8]   96 	ld	d, #0x00
      00001D 19               [ 8]   97 	add	hl, de
      00001E 7E               [ 8]   98 	ld	a, (hl)
                                     99 ;src\main.c:45: }
      00001F C9               [16]  100 	ret
      000020                        101 _player_down:
      000020 F8                     102 	.db #0xf8	; -8
      000021 F8                     103 	.db #0xf8	; -8
      000022 00                     104 	.db #0x00	; 0
      000023 00                     105 	.db #0x00	; 0
      000024 00                     106 	.db #0x00	;  0
      000025 08                     107 	.db #0x08	;  8
      000026 02                     108 	.db #0x02	; 2
      000027 00                     109 	.db #0x00	; 0
      000028 08                     110 	.db #0x08	;  8
      000029 F8                     111 	.db #0xf8	; -8
      00002A 01                     112 	.db #0x01	; 1
      00002B 00                     113 	.db #0x00	; 0
      00002C 00                     114 	.db #0x00	;  0
      00002D 08                     115 	.db #0x08	;  8
      00002E 03                     116 	.db #0x03	; 3
      00002F 00                     117 	.db #0x00	; 0
      000030 80                     118 	.db #0x80	; -128
      000031 00                     119 	.db #0x00	;  0
      000032 00                     120 	.db #0x00	; 0
      000033 00                     121 	.db #0x00	; 0
      000034                        122 _player_metasprites:
      000034r20r00                  123 	.dw _player_down
      000036                        124 _map_collision:
      000036 31                     125 	.db #0x31	; 49	'1'
      000037 31                     126 	.db #0x31	; 49	'1'
      000038 31                     127 	.db #0x31	; 49	'1'
      000039 31                     128 	.db #0x31	; 49	'1'
      00003A 31                     129 	.db #0x31	; 49	'1'
      00003B 31                     130 	.db #0x31	; 49	'1'
      00003C 31                     131 	.db #0x31	; 49	'1'
      00003D 31                     132 	.db #0x31	; 49	'1'
      00003E 31                     133 	.db #0x31	; 49	'1'
      00003F 31                     134 	.db #0x31	; 49	'1'
      000040 00                     135 	.db 0x00
      000041 31                     136 	.db #0x31	; 49	'1'
      000042 31                     137 	.db #0x31	; 49	'1'
      000043 31                     138 	.db #0x31	; 49	'1'
      000044 31                     139 	.db #0x31	; 49	'1'
      000045 31                     140 	.db #0x31	; 49	'1'
      000046 31                     141 	.db #0x31	; 49	'1'
      000047 31                     142 	.db #0x31	; 49	'1'
      000048 31                     143 	.db #0x31	; 49	'1'
      000049 31                     144 	.db #0x31	; 49	'1'
      00004A 31                     145 	.db #0x31	; 49	'1'
      00004B 00                     146 	.db 0x00
      00004C 31                     147 	.db #0x31	; 49	'1'
      00004D 31                     148 	.db #0x31	; 49	'1'
      00004E 31                     149 	.db #0x31	; 49	'1'
      00004F 31                     150 	.db #0x31	; 49	'1'
      000050 30                     151 	.db #0x30	; 48	'0'
      000051 30                     152 	.db #0x30	; 48	'0'
      000052 30                     153 	.db #0x30	; 48	'0'
      000053 30                     154 	.db #0x30	; 48	'0'
      000054 30                     155 	.db #0x30	; 48	'0'
      000055 31                     156 	.db #0x31	; 49	'1'
      000056 00                     157 	.db 0x00
      000057 31                     158 	.db #0x31	; 49	'1'
      000058 31                     159 	.db #0x31	; 49	'1'
      000059 31                     160 	.db #0x31	; 49	'1'
      00005A 31                     161 	.db #0x31	; 49	'1'
      00005B 30                     162 	.db #0x30	; 48	'0'
      00005C 31                     163 	.db #0x31	; 49	'1'
      00005D 30                     164 	.db #0x30	; 48	'0'
      00005E 31                     165 	.db #0x31	; 49	'1'
      00005F 30                     166 	.db #0x30	; 48	'0'
      000060 31                     167 	.db #0x31	; 49	'1'
      000061 00                     168 	.db 0x00
      000062 30                     169 	.db #0x30	; 48	'0'
      000063 30                     170 	.db #0x30	; 48	'0'
      000064 30                     171 	.db #0x30	; 48	'0'
      000065 30                     172 	.db #0x30	; 48	'0'
      000066 30                     173 	.db #0x30	; 48	'0'
      000067 30                     174 	.db #0x30	; 48	'0'
      000068 30                     175 	.db #0x30	; 48	'0'
      000069 30                     176 	.db #0x30	; 48	'0'
      00006A 30                     177 	.db #0x30	; 48	'0'
      00006B 31                     178 	.db #0x31	; 49	'1'
      00006C 00                     179 	.db 0x00
      00006D 31                     180 	.db #0x31	; 49	'1'
      00006E 31                     181 	.db #0x31	; 49	'1'
      00006F 31                     182 	.db #0x31	; 49	'1'
      000070 31                     183 	.db #0x31	; 49	'1'
      000071 30                     184 	.db #0x30	; 48	'0'
      000072 31                     185 	.db #0x31	; 49	'1'
      000073 30                     186 	.db #0x30	; 48	'0'
      000074 31                     187 	.db #0x31	; 49	'1'
      000075 30                     188 	.db #0x30	; 48	'0'
      000076 31                     189 	.db #0x31	; 49	'1'
      000077 00                     190 	.db 0x00
      000078 31                     191 	.db #0x31	; 49	'1'
      000079 31                     192 	.db #0x31	; 49	'1'
      00007A 31                     193 	.db #0x31	; 49	'1'
      00007B 31                     194 	.db #0x31	; 49	'1'
      00007C 30                     195 	.db #0x30	; 48	'0'
      00007D 30                     196 	.db #0x30	; 48	'0'
      00007E 30                     197 	.db #0x30	; 48	'0'
      00007F 30                     198 	.db #0x30	; 48	'0'
      000080 30                     199 	.db #0x30	; 48	'0'
      000081 31                     200 	.db #0x31	; 49	'1'
      000082 00                     201 	.db 0x00
      000083 31                     202 	.db #0x31	; 49	'1'
      000084 31                     203 	.db #0x31	; 49	'1'
      000085 31                     204 	.db #0x31	; 49	'1'
      000086 31                     205 	.db #0x31	; 49	'1'
      000087 31                     206 	.db #0x31	; 49	'1'
      000088 31                     207 	.db #0x31	; 49	'1'
      000089 31                     208 	.db #0x31	; 49	'1'
      00008A 31                     209 	.db #0x31	; 49	'1'
      00008B 31                     210 	.db #0x31	; 49	'1'
      00008C 31                     211 	.db #0x31	; 49	'1'
      00008D 00                     212 	.db 0x00
      00008E 31                     213 	.db #0x31	; 49	'1'
      00008F 31                     214 	.db #0x31	; 49	'1'
      000090 31                     215 	.db #0x31	; 49	'1'
      000091 31                     216 	.db #0x31	; 49	'1'
      000092 31                     217 	.db #0x31	; 49	'1'
      000093 31                     218 	.db #0x31	; 49	'1'
      000094 31                     219 	.db #0x31	; 49	'1'
      000095 31                     220 	.db #0x31	; 49	'1'
      000096 31                     221 	.db #0x31	; 49	'1'
      000097 31                     222 	.db #0x31	; 49	'1'
      000098 00                     223 	.db 0x00
      000099 00                     224 	.db 0x00
      00009A 00                     225 	.db 0x00
      00009B 00                     226 	.db 0x00
      00009C 00                     227 	.db 0x00
      00009D 00                     228 	.db 0x00
      00009E 00                     229 	.db 0x00
      00009F 00                     230 	.db 0x00
      0000A0 00                     231 	.db 0x00
      0000A1 00                     232 	.db 0x00
      0000A2 00                     233 	.db 0x00
      0000A3 00                     234 	.db 0x00
                                    235 ;src\main.c:47: void printMap() {
                                    236 ;	---------------------------------
                                    237 ; Function printMap
                                    238 ; ---------------------------------
      0000A4                        239 _printMap::
                                    240 ;src\main.c:48: for (uint8_t y = 0; y < 11; y++)
      0000A4 0E 00            [ 8]  241 	ld	c, #0x00
      0000A6                        242 00107$:
      0000A6 79               [ 4]  243 	ld	a, c
      0000A7 D6 0B            [ 8]  244 	sub	a, #0x0b
      0000A9 D0               [20]  245 	ret	NC
                                    246 ;src\main.c:50: for (uint8_t x = 0; x < 10; x++)
      0000AA 06 00            [ 8]  247 	ld	b, #0x00
      0000AC 69               [ 4]  248 	ld	l, c
      0000AD 60               [ 4]  249 	ld	h, b
      0000AE 29               [ 8]  250 	add	hl, hl
      0000AF 29               [ 8]  251 	add	hl, hl
      0000B0 09               [ 8]  252 	add	hl, bc
      0000B1 29               [ 8]  253 	add	hl, hl
      0000B2 09               [ 8]  254 	add	hl, bc
      0000B3 7D               [ 4]  255 	ld	a, l
      0000B4 C6r36            [ 8]  256 	add	a, #<(_map_collision)
      0000B6 5F               [ 4]  257 	ld	e, a
      0000B7 7C               [ 4]  258 	ld	a, h
      0000B8 CEs00            [ 8]  259 	adc	a, #>(_map_collision)
      0000BA 57               [ 4]  260 	ld	d, a
      0000BB 06 00            [ 8]  261 	ld	b, #0x00
      0000BD                        262 00104$:
      0000BD 78               [ 4]  263 	ld	a, b
      0000BE D6 0A            [ 8]  264 	sub	a, #0x0a
      0000C0 30 18            [12]  265 	jr	NC, 00101$
                                    266 ;src\main.c:52: printf("%c ", map_collision[y][x]);
      0000C2 68               [ 4]  267 	ld	l, b
      0000C3 26 00            [ 8]  268 	ld	h, #0x00
      0000C5 19               [ 8]  269 	add	hl, de
      0000C6 6E               [ 8]  270 	ld	l, (hl)
                                    271 ;	spillPairReg hl
      0000C7 26 00            [ 8]  272 	ld	h, #0x00
                                    273 ;	spillPairReg hl
                                    274 ;	spillPairReg hl
      0000C9 C5               [16]  275 	push	bc
      0000CA D5               [16]  276 	push	de
      0000CB E5               [16]  277 	push	hl
      0000CC 21rE5r00         [12]  278 	ld	hl, #___str_0
      0000CF E5               [16]  279 	push	hl
      0000D0 CDr00r00         [24]  280 	call	_printf
      0000D3 E8 04            [16]  281 	add	sp, #4
      0000D5 D1               [12]  282 	pop	de
      0000D6 C1               [12]  283 	pop	bc
                                    284 ;src\main.c:50: for (uint8_t x = 0; x < 10; x++)
      0000D7 04               [ 4]  285 	inc	b
      0000D8 18 E3            [12]  286 	jr	00104$
      0000DA                        287 00101$:
                                    288 ;src\main.c:54: printf("\n\n");
      0000DA C5               [16]  289 	push	bc
      0000DB 11rE9r00         [12]  290 	ld	de, #___str_2
      0000DE CDr00r00         [24]  291 	call	_puts
      0000E1 C1               [12]  292 	pop	bc
                                    293 ;src\main.c:48: for (uint8_t y = 0; y < 11; y++)
      0000E2 0C               [ 4]  294 	inc	c
                                    295 ;src\main.c:56: }
      0000E3 18 C1            [12]  296 	jr	00107$
      0000E5                        297 ___str_0:
      0000E5 25 63 20               298 	.ascii "%c "
      0000E8 00                     299 	.db 0x00
      0000E9                        300 ___str_2:
      0000E9 0A                     301 	.db 0x0a
      0000EA 00                     302 	.db 0x00
                                    303 ;src\main.c:58: void init_gfx() {
                                    304 ;	---------------------------------
                                    305 ; Function init_gfx
                                    306 ; ---------------------------------
      0000EB                        307 _init_gfx::
                                    308 ;src\main.c:60: set_bkg_data(0, 54u, TileLabel);
      0000EB 11r00r00         [12]  309 	ld	de, #_TileLabel
      0000EE D5               [16]  310 	push	de
      0000EF 21 00 36         [12]  311 	ld	hl, #0x3600
      0000F2 E5               [16]  312 	push	hl
      0000F3 CDr00r00         [24]  313 	call	_set_bkg_data
      0000F6 E8 04            [16]  314 	add	sp, #4
                                    315 ;src\main.c:61: set_bkg_tiles(0, 0, 20u, 18u, Visual_Map);
      0000F8 11r00r00         [12]  316 	ld	de, #_Visual_Map
      0000FB D5               [16]  317 	push	de
      0000FC 21 14 12         [12]  318 	ld	hl, #0x1214
      0000FF E5               [16]  319 	push	hl
      000100 AF               [ 4]  320 	xor	a, a
      000101 0F               [ 4]  321 	rrca
      000102 F5               [16]  322 	push	af
      000103 CDr00r00         [24]  323 	call	_set_bkg_tiles
      000106 E8 06            [16]  324 	add	sp, #6
                                    325 ;src\main.c:64: SHOW_BKG;
      000108 F0r00            [12]  326 	ldh	a, (_LCDC_REG + 0)
      00010A F6 01            [ 8]  327 	or	a, #0x01
      00010C E0r00            [12]  328 	ldh	(_LCDC_REG + 0), a
                                    329 ;src\main.c:67: set_sprite_data(0, 45u, Cast_Tiles);
      00010E 11r00r00         [12]  330 	ld	de, #_Cast_Tiles
      000111 D5               [16]  331 	push	de
      000112 21 00 2D         [12]  332 	ld	hl, #0x2d00
      000115 E5               [16]  333 	push	hl
      000116 CDr00r00         [24]  334 	call	_set_sprite_data
      000119 E8 04            [16]  335 	add	sp, #4
                                    336 ;src\main.c:68: SHOW_SPRITES;
      00011B F0r00            [12]  337 	ldh	a, (_LCDC_REG + 0)
      00011D F6 02            [ 8]  338 	or	a, #0x02
      00011F E0r00            [12]  339 	ldh	(_LCDC_REG + 0), a
                                    340 ;src\main.c:69: }
      000121 C9               [16]  341 	ret
                                    342 ;src\main.c:73: void main(void)
                                    343 ;	---------------------------------
                                    344 ; Function main
                                    345 ; ---------------------------------
      000122                        346 _main::
      000122 E8 F8            [16]  347 	add	sp, #-8
                                    348 ;src\main.c:76: uint8_t local_x = 4; // LOCAL LOCATION ON MAP
      000124 F8 01            [12]  349 	ldhl	sp,	#1
                                    350 ;src\main.c:77: uint8_t local_y = 4;
      000126 3E 04            [ 8]  351 	ld	a, #0x04
      000128 22               [ 8]  352 	ld	(hl+), a
      000129 36 04            [12]  353 	ld	(hl), #0x04
                                    354 ;src\main.c:78: uint8_t sprite_x = 80; // SPRITE LOCATION ON SCREEN
      00012B F8 06            [12]  355 	ldhl	sp,	#6
                                    356 ;src\main.c:79: uint8_t sprite_y = 88;
      00012D 3E 50            [ 8]  357 	ld	a, #0x50
      00012F 22               [ 8]  358 	ld	(hl+), a
      000130 36 58            [12]  359 	ld	(hl), #0x58
                                    360 ;src\main.c:81: enum player_state state = idle;
      000132 F8 03            [12]  361 	ldhl	sp,	#3
      000134 36 00            [12]  362 	ld	(hl), #0x00
                                    363 ;src\main.c:82: init_gfx();
      000136 CDrEBr00         [24]  364 	call	_init_gfx
                                    365 ;src\main.c:83: volatile uint8_t timer = 0;
      000139 F8 00            [12]  366 	ldhl	sp,	#0
      00013B 36 00            [12]  367 	ld	(hl), #0x00
                                    368 ;src\main.c:84: move_metasprite(player_metasprites[0], 0, 0, 80, 88);
      00013D 21r34r00         [12]  369 	ld	hl, #_player_metasprites
      000140 2A               [ 8]  370 	ld	a, (hl+)
      000141 4F               [ 4]  371 	ld	c, a
      000142 7E               [ 8]  372 	ld	a, (hl)
                                    373 ;C:/gbdk/include/gb/metasprites.h:140: __current_metasprite = metasprite;
      000143 21r00r00         [12]  374 	ld	hl, #___current_metasprite
      000146 71               [ 8]  375 	ld	(hl), c
      000147 23               [ 8]  376 	inc	hl
      000148 77               [ 8]  377 	ld	(hl), a
                                    378 ;C:/gbdk/include/gb/metasprites.h:141: __current_base_tile = base_tile;
      000149 21r00r00         [12]  379 	ld	hl, #___current_base_tile
      00014C 36 00            [12]  380 	ld	(hl), #0x00
                                    381 ;C:/gbdk/include/gb/metasprites.h:142: return __move_metasprite(base_sprite, x, y);
      00014E 21 50 58         [12]  382 	ld	hl, #0x5850
      000151 E5               [16]  383 	push	hl
      000152 AF               [ 4]  384 	xor	a, a
      000153 F5               [16]  385 	push	af
      000154 33               [ 8]  386 	inc	sp
      000155 CDr00r00         [24]  387 	call	___move_metasprite
      000158 E8 03            [16]  388 	add	sp, #3
                                    389 ;src\main.c:87: while(1) {
      00015A F8 04            [12]  390 	ldhl	sp,	#4
      00015C 36 00            [12]  391 	ld	(hl), #0x00
      00015E 23               [ 8]  392 	inc	hl
      00015F 36 00            [12]  393 	ld	(hl), #0x00
      000161                        394 00147$:
                                    395 ;src\main.c:88: joy = joypad();
      000161 CDr00r00         [24]  396 	call	_joypad
      000164 EAr00r00         [16]  397 	ld	(#_joy),a
                                    398 ;src\main.c:89: timer++;
      000167 F8 00            [12]  399 	ldhl	sp,	#0
      000169 34               [12]  400 	inc	(hl)
      00016A 7E               [ 8]  401 	ld	a, (hl)
                                    402 ;src\main.c:90: if (state == idle)
      00016B F8 03            [12]  403 	ldhl	sp,	#3
      00016D 7E               [ 8]  404 	ld	a, (hl)
      00016E B7               [ 4]  405 	or	a, a
      00016F C2r07r02         [16]  406 	jp	NZ, 00144$
                                    407 ;src\main.c:93: if (joy & J_UP)
      000172 FAr00r00         [16]  408 	ld	a, (#_joy)
                                    409 ;src\main.c:95: if (check_map(local_x, local_y - 1) == '0')
      000175 F8 02            [12]  410 	ldhl	sp,	#2
      000177 46               [ 8]  411 	ld	b, (hl)
                                    412 ;src\main.c:98: goal_y = sprite_y - 16;
      000178 F8 07            [12]  413 	ldhl	sp,	#7
      00017A 4E               [ 8]  414 	ld	c, (hl)
                                    415 ;src\main.c:93: if (joy & J_UP)
      00017B CB 57            [ 8]  416 	bit	2, a
      00017D 28 1E            [12]  417 	jr	Z, 00118$
                                    418 ;src\main.c:95: if (check_map(local_x, local_y - 1) == '0')
      00017F 05               [ 4]  419 	dec	b
      000180 C5               [16]  420 	push	bc
      000181 58               [ 4]  421 	ld	e, b
      000182 F8 03            [12]  422 	ldhl	sp,	#3
      000184 7E               [ 8]  423 	ld	a, (hl)
      000185 CDr0Cr00         [24]  424 	call	_check_map
      000188 C1               [12]  425 	pop	bc
      000189 D6 30            [ 8]  426 	sub	a, #0x30
      00018B C2r0Er03         [16]  427 	jp	NZ,00145$
                                    428 ;src\main.c:97: local_y -= 1;
      00018E F8 02            [12]  429 	ldhl	sp,	#2
      000190 70               [ 8]  430 	ld	(hl), b
                                    431 ;src\main.c:98: goal_y = sprite_y - 16;
      000191 79               [ 4]  432 	ld	a, c
      000192 C6 F0            [ 8]  433 	add	a, #0xf0
      000194 F8 05            [12]  434 	ldhl	sp,	#5
                                    435 ;src\main.c:99: state = up;
      000196 32               [ 8]  436 	ld	(hl-), a
      000197 2B               [ 8]  437 	dec	hl
      000198 36 03            [12]  438 	ld	(hl), #0x03
      00019A C3r0Er03         [16]  439 	jp	00145$
      00019D                        440 00118$:
                                    441 ;src\main.c:104: else if (joy & J_DOWN)
      00019D CB 5F            [ 8]  442 	bit	3, a
      00019F 28 1E            [12]  443 	jr	Z, 00115$
                                    444 ;src\main.c:106: if (check_map(local_x, local_y + 1) == '0')
      0001A1 04               [ 4]  445 	inc	b
      0001A2 C5               [16]  446 	push	bc
      0001A3 58               [ 4]  447 	ld	e, b
      0001A4 F8 03            [12]  448 	ldhl	sp,	#3
      0001A6 7E               [ 8]  449 	ld	a, (hl)
      0001A7 CDr0Cr00         [24]  450 	call	_check_map
      0001AA C1               [12]  451 	pop	bc
      0001AB D6 30            [ 8]  452 	sub	a, #0x30
      0001AD C2r0Er03         [16]  453 	jp	NZ,00145$
                                    454 ;src\main.c:108: local_y += 1;
      0001B0 F8 02            [12]  455 	ldhl	sp,	#2
      0001B2 70               [ 8]  456 	ld	(hl), b
                                    457 ;src\main.c:109: goal_y = sprite_y + 16;
      0001B3 79               [ 4]  458 	ld	a, c
      0001B4 C6 10            [ 8]  459 	add	a, #0x10
      0001B6 F8 05            [12]  460 	ldhl	sp,	#5
                                    461 ;src\main.c:110: state = down;
      0001B8 32               [ 8]  462 	ld	(hl-), a
      0001B9 2B               [ 8]  463 	dec	hl
      0001BA 36 04            [12]  464 	ld	(hl), #0x04
      0001BC C3r0Er03         [16]  465 	jp	00145$
      0001BF                        466 00115$:
                                    467 ;src\main.c:117: if (check_map(local_x - 1, local_y) == '0')
      0001BF F8 01            [12]  468 	ldhl	sp,	#1
      0001C1 46               [ 8]  469 	ld	b, (hl)
                                    470 ;src\main.c:120: goal_x = sprite_x - 16;
      0001C2 F8 06            [12]  471 	ldhl	sp,	#6
      0001C4 4E               [ 8]  472 	ld	c, (hl)
                                    473 ;src\main.c:115: else if (joy & J_LEFT)
      0001C5 CB 4F            [ 8]  474 	bit	1, a
      0001C7 28 1D            [12]  475 	jr	Z, 00112$
                                    476 ;src\main.c:117: if (check_map(local_x - 1, local_y) == '0')
      0001C9 05               [ 4]  477 	dec	b
      0001CA C5               [16]  478 	push	bc
      0001CB F8 04            [12]  479 	ldhl	sp,	#4
      0001CD 5E               [ 8]  480 	ld	e, (hl)
      0001CE 78               [ 4]  481 	ld	a, b
      0001CF CDr0Cr00         [24]  482 	call	_check_map
      0001D2 C1               [12]  483 	pop	bc
      0001D3 D6 30            [ 8]  484 	sub	a, #0x30
      0001D5 C2r0Er03         [16]  485 	jp	NZ,00145$
                                    486 ;src\main.c:119: local_x -= 1;
      0001D8 F8 01            [12]  487 	ldhl	sp,	#1
      0001DA 70               [ 8]  488 	ld	(hl), b
                                    489 ;src\main.c:120: goal_x = sprite_x - 16;
      0001DB 79               [ 4]  490 	ld	a, c
      0001DC C6 F0            [ 8]  491 	add	a, #0xf0
      0001DE F8 04            [12]  492 	ldhl	sp,	#4
                                    493 ;src\main.c:121: state = left;
      0001E0 32               [ 8]  494 	ld	(hl-), a
      0001E1 36 01            [12]  495 	ld	(hl), #0x01
      0001E3 C3r0Er03         [16]  496 	jp	00145$
      0001E6                        497 00112$:
                                    498 ;src\main.c:126: else if (joy  & J_RIGHT)
      0001E6 0F               [ 4]  499 	rrca
      0001E7 D2r0Er03         [16]  500 	jp	NC,00145$
                                    501 ;src\main.c:128: if (check_map(local_x + 1, local_y) == '0')
      0001EA 04               [ 4]  502 	inc	b
      0001EB C5               [16]  503 	push	bc
      0001EC F8 04            [12]  504 	ldhl	sp,	#4
      0001EE 5E               [ 8]  505 	ld	e, (hl)
      0001EF 78               [ 4]  506 	ld	a, b
      0001F0 CDr0Cr00         [24]  507 	call	_check_map
      0001F3 C1               [12]  508 	pop	bc
      0001F4 D6 30            [ 8]  509 	sub	a, #0x30
      0001F6 C2r0Er03         [16]  510 	jp	NZ,00145$
                                    511 ;src\main.c:130: local_x += 1;
      0001F9 F8 01            [12]  512 	ldhl	sp,	#1
      0001FB 70               [ 8]  513 	ld	(hl), b
                                    514 ;src\main.c:131: goal_x = sprite_x + 16;
      0001FC 79               [ 4]  515 	ld	a, c
      0001FD C6 10            [ 8]  516 	add	a, #0x10
      0001FF F8 04            [12]  517 	ldhl	sp,	#4
                                    518 ;src\main.c:132: state = right;
      000201 32               [ 8]  519 	ld	(hl-), a
      000202 36 02            [12]  520 	ld	(hl), #0x02
      000204 C3r0Er03         [16]  521 	jp	00145$
      000207                        522 00144$:
                                    523 ;src\main.c:139: else if (state == right) // switch(state)
      000207 F8 03            [12]  524 	ldhl	sp,	#3
      000209 7E               [ 8]  525 	ld	a, (hl)
      00020A D6 02            [ 8]  526 	sub	a, #0x02
      00020C 20 38            [12]  527 	jr	NZ, 00141$
                                    528 ;src\main.c:141: if (sprite_x < goal_x)
      00020E F8 06            [12]  529 	ldhl	sp,	#6
      000210 3A               [ 8]  530 	ld	a, (hl-)
      000211 2B               [ 8]  531 	dec	hl
      000212 96               [ 8]  532 	sub	a, (hl)
      000213 30 2A            [12]  533 	jr	NC, 00121$
                                    534 ;src\main.c:143: sprite_x++;
      000215 23               [ 8]  535 	inc	hl
      000216 23               [ 8]  536 	inc	hl
      000217 34               [12]  537 	inc	(hl)
                                    538 ;src\main.c:144: move_metasprite(player_metasprites[0], 0, 0, sprite_x, sprite_y);
      000218 21r34r00         [12]  539 	ld	hl, #_player_metasprites
      00021B 2A               [ 8]  540 	ld	a, (hl+)
      00021C 4F               [ 4]  541 	ld	c, a
      00021D 7E               [ 8]  542 	ld	a, (hl)
                                    543 ;C:/gbdk/include/gb/metasprites.h:140: __current_metasprite = metasprite;
      00021E 21r00r00         [12]  544 	ld	hl, #___current_metasprite
      000221 71               [ 8]  545 	ld	(hl), c
      000222 23               [ 8]  546 	inc	hl
      000223 77               [ 8]  547 	ld	(hl), a
                                    548 ;C:/gbdk/include/gb/metasprites.h:141: __current_base_tile = base_tile;
      000224 21r00r00         [12]  549 	ld	hl, #___current_base_tile
      000227 36 00            [12]  550 	ld	(hl), #0x00
                                    551 ;C:/gbdk/include/gb/metasprites.h:142: return __move_metasprite(base_sprite, x, y);
      000229 F8 07            [12]  552 	ldhl	sp,	#7
      00022B 3A               [ 8]  553 	ld	a, (hl-)
      00022C F5               [16]  554 	push	af
      00022D 33               [ 8]  555 	inc	sp
      00022E 66               [ 8]  556 	ld	h, (hl)
      00022F 2E 00            [ 8]  557 	ld	l, #0x00
      000231 E5               [16]  558 	push	hl
      000232 CDr00r00         [24]  559 	call	___move_metasprite
      000235 E8 03            [16]  560 	add	sp, #3
                                    561 ;src\main.c:145: performantdelay(5); // speed variable magic number
      000237 3E 05            [ 8]  562 	ld	a, #0x05
      000239 CDr00r00         [24]  563 	call	_performantdelay
      00023C C3r0Er03         [16]  564 	jp	00145$
      00023F                        565 00121$:
                                    566 ;src\main.c:149: state = idle;
      00023F F8 03            [12]  567 	ldhl	sp,	#3
      000241 36 00            [12]  568 	ld	(hl), #0x00
      000243 C3r0Er03         [16]  569 	jp	00145$
      000246                        570 00141$:
                                    571 ;src\main.c:152: else if (state == left)
      000246 F8 03            [12]  572 	ldhl	sp,	#3
      000248 7E               [ 8]  573 	ld	a, (hl)
      000249 3D               [ 4]  574 	dec	a
      00024A 20 36            [12]  575 	jr	NZ, 00138$
                                    576 ;src\main.c:154: if (sprite_x > goal_x)
      00024C F8 04            [12]  577 	ldhl	sp,	#4
      00024E 2A               [ 8]  578 	ld	a, (hl+)
      00024F 23               [ 8]  579 	inc	hl
      000250 96               [ 8]  580 	sub	a, (hl)
      000251 30 28            [12]  581 	jr	NC, 00124$
                                    582 ;src\main.c:156: sprite_x--;
      000253 35               [12]  583 	dec	(hl)
                                    584 ;src\main.c:157: move_metasprite(player_metasprites[0], 0, 0, sprite_x, sprite_y);
      000254 21r34r00         [12]  585 	ld	hl, #_player_metasprites
      000257 2A               [ 8]  586 	ld	a, (hl+)
      000258 4F               [ 4]  587 	ld	c, a
      000259 7E               [ 8]  588 	ld	a, (hl)
                                    589 ;C:/gbdk/include/gb/metasprites.h:140: __current_metasprite = metasprite;
      00025A 21r00r00         [12]  590 	ld	hl, #___current_metasprite
      00025D 71               [ 8]  591 	ld	(hl), c
      00025E 23               [ 8]  592 	inc	hl
      00025F 77               [ 8]  593 	ld	(hl), a
                                    594 ;C:/gbdk/include/gb/metasprites.h:141: __current_base_tile = base_tile;
      000260 21r00r00         [12]  595 	ld	hl, #___current_base_tile
      000263 36 00            [12]  596 	ld	(hl), #0x00
                                    597 ;C:/gbdk/include/gb/metasprites.h:142: return __move_metasprite(base_sprite, x, y);
      000265 F8 07            [12]  598 	ldhl	sp,	#7
      000267 3A               [ 8]  599 	ld	a, (hl-)
      000268 F5               [16]  600 	push	af
      000269 33               [ 8]  601 	inc	sp
      00026A 66               [ 8]  602 	ld	h, (hl)
      00026B 2E 00            [ 8]  603 	ld	l, #0x00
      00026D E5               [16]  604 	push	hl
      00026E CDr00r00         [24]  605 	call	___move_metasprite
      000271 E8 03            [16]  606 	add	sp, #3
                                    607 ;src\main.c:158: performantdelay(5); // speed variable magic number
      000273 3E 05            [ 8]  608 	ld	a, #0x05
      000275 CDr00r00         [24]  609 	call	_performantdelay
      000278 C3r0Er03         [16]  610 	jp	00145$
      00027B                        611 00124$:
                                    612 ;src\main.c:162: state = idle;
      00027B F8 03            [12]  613 	ldhl	sp,	#3
      00027D 36 00            [12]  614 	ld	(hl), #0x00
      00027F C3r0Er03         [16]  615 	jp	00145$
      000282                        616 00138$:
                                    617 ;src\main.c:165: else if (state == down)
      000282 F8 03            [12]  618 	ldhl	sp,	#3
      000284 7E               [ 8]  619 	ld	a, (hl)
      000285 D6 04            [ 8]  620 	sub	a, #0x04
      000287 20 4C            [12]  621 	jr	NZ, 00135$
                                    622 ;src\main.c:167: if(sprite_y < goal_y)
      000289 F8 07            [12]  623 	ldhl	sp,	#7
      00028B 3A               [ 8]  624 	ld	a, (hl-)
      00028C 2B               [ 8]  625 	dec	hl
      00028D 96               [ 8]  626 	sub	a, (hl)
      00028E 30 3F            [12]  627 	jr	NC, 00127$
                                    628 ;src\main.c:169: sprite_y++;
      000290 23               [ 8]  629 	inc	hl
      000291 23               [ 8]  630 	inc	hl
      000292 34               [12]  631 	inc	(hl)
                                    632 ;src\main.c:170: move_metasprite_hvflip(player_metasprites[0], 0, 0, sprite_x, sprite_y);
      000293 21r34r00         [12]  633 	ld	hl, #_player_metasprites
      000296 2A               [ 8]  634 	ld	a, (hl+)
      000297 47               [ 4]  635 	ld	b, a
      000298 7E               [ 8]  636 	ld	a, (hl)
      000299 F8 07            [12]  637 	ldhl	sp,	#7
      00029B 4E               [ 8]  638 	ld	c, (hl)
      00029C 2B               [ 8]  639 	dec	hl
      00029D 5E               [ 8]  640 	ld	e, (hl)
                                    641 ;C:/gbdk/include/gb/metasprites.h:228: __current_metasprite = metasprite;
      00029E 21r00r00         [12]  642 	ld	hl, #___current_metasprite
      0002A1 70               [ 8]  643 	ld	(hl), b
      0002A2 23               [ 8]  644 	inc	hl
      0002A3 77               [ 8]  645 	ld	(hl), a
                                    646 ;C:/gbdk/include/gb/metasprites.h:229: __current_base_tile = base_tile;
      0002A4 21r00r00         [12]  647 	ld	hl, #___current_base_tile
      0002A7 36 00            [12]  648 	ld	(hl), #0x00
                                    649 ;C:/gbdk/include/gb/metasprites.h:230: return __move_metasprite_hvflip(base_sprite, x - 8, y - ((LCDC_REG & 0x04U) ? 16 : 8));
      0002A9 F0r00            [12]  650 	ldh	a, (_LCDC_REG + 0)
      0002AB CB 57            [ 8]  651 	bit	2, a
      0002AD 28 05            [12]  652 	jr	Z, 00156$
      0002AF 21 10 00         [12]  653 	ld	hl, #0x0010
      0002B2 18 03            [12]  654 	jr	00157$
      0002B4                        655 00156$:
      0002B4 21 08 00         [12]  656 	ld	hl, #0x0008
      0002B7                        657 00157$:
      0002B7 79               [ 4]  658 	ld	a, c
      0002B8 95               [ 4]  659 	sub	a, l
      0002B9 47               [ 4]  660 	ld	b, a
      0002BA 7B               [ 4]  661 	ld	a, e
      0002BB C6 F8            [ 8]  662 	add	a, #0xf8
      0002BD C5               [16]  663 	push	bc
      0002BE 33               [ 8]  664 	inc	sp
      0002BF 67               [ 4]  665 	ld	h, a
      0002C0 2E 00            [ 8]  666 	ld	l, #0x00
      0002C2 E5               [16]  667 	push	hl
      0002C3 CDr00r00         [24]  668 	call	___move_metasprite_hvflip
      0002C6 E8 03            [16]  669 	add	sp, #3
                                    670 ;src\main.c:171: performantdelay(5);// speed variable magic number
      0002C8 3E 05            [ 8]  671 	ld	a, #0x05
      0002CA CDr00r00         [24]  672 	call	_performantdelay
      0002CD 18 3F            [12]  673 	jr	00145$
      0002CF                        674 00127$:
                                    675 ;src\main.c:174: state = idle;
      0002CF F8 03            [12]  676 	ldhl	sp,	#3
      0002D1 36 00            [12]  677 	ld	(hl), #0x00
      0002D3 18 39            [12]  678 	jr	00145$
      0002D5                        679 00135$:
                                    680 ;src\main.c:177: else if (state == up)
      0002D5 F8 03            [12]  681 	ldhl	sp,	#3
      0002D7 7E               [ 8]  682 	ld	a, (hl)
      0002D8 D6 03            [ 8]  683 	sub	a, #0x03
      0002DA 20 32            [12]  684 	jr	NZ, 00145$
                                    685 ;src\main.c:179: if (sprite_y > goal_y)
      0002DC F8 05            [12]  686 	ldhl	sp,	#5
      0002DE 2A               [ 8]  687 	ld	a, (hl+)
      0002DF 23               [ 8]  688 	inc	hl
      0002E0 96               [ 8]  689 	sub	a, (hl)
      0002E1 30 27            [12]  690 	jr	NC, 00130$
                                    691 ;src\main.c:181: sprite_y--;
      0002E3 35               [12]  692 	dec	(hl)
                                    693 ;src\main.c:182: move_metasprite(player_metasprites[0], 0, 0, sprite_x, sprite_y);
      0002E4 21r34r00         [12]  694 	ld	hl, #_player_metasprites
      0002E7 2A               [ 8]  695 	ld	a, (hl+)
      0002E8 4F               [ 4]  696 	ld	c, a
      0002E9 7E               [ 8]  697 	ld	a, (hl)
                                    698 ;C:/gbdk/include/gb/metasprites.h:140: __current_metasprite = metasprite;
      0002EA 21r00r00         [12]  699 	ld	hl, #___current_metasprite
      0002ED 71               [ 8]  700 	ld	(hl), c
      0002EE 23               [ 8]  701 	inc	hl
      0002EF 77               [ 8]  702 	ld	(hl), a
                                    703 ;C:/gbdk/include/gb/metasprites.h:141: __current_base_tile = base_tile;
      0002F0 21r00r00         [12]  704 	ld	hl, #___current_base_tile
      0002F3 36 00            [12]  705 	ld	(hl), #0x00
                                    706 ;C:/gbdk/include/gb/metasprites.h:142: return __move_metasprite(base_sprite, x, y);
      0002F5 F8 07            [12]  707 	ldhl	sp,	#7
      0002F7 3A               [ 8]  708 	ld	a, (hl-)
      0002F8 F5               [16]  709 	push	af
      0002F9 33               [ 8]  710 	inc	sp
      0002FA 66               [ 8]  711 	ld	h, (hl)
      0002FB 2E 00            [ 8]  712 	ld	l, #0x00
      0002FD E5               [16]  713 	push	hl
      0002FE CDr00r00         [24]  714 	call	___move_metasprite
      000301 E8 03            [16]  715 	add	sp, #3
                                    716 ;src\main.c:183: performantdelay(5); // speed variable magic number
      000303 3E 05            [ 8]  717 	ld	a, #0x05
      000305 CDr00r00         [24]  718 	call	_performantdelay
      000308 18 04            [12]  719 	jr	00145$
      00030A                        720 00130$:
                                    721 ;src\main.c:186: state = idle;
      00030A F8 03            [12]  722 	ldhl	sp,	#3
      00030C 36 00            [12]  723 	ld	(hl), #0x00
      00030E                        724 00145$:
                                    725 ;src\main.c:190: wait_vbl_done();
      00030E CDr00r00         [24]  726 	call	_wait_vbl_done
      000311 C3r61r01         [16]  727 	jp	00147$
                                    728 ;src\main.c:192: }
      000314 E8 08            [16]  729 	add	sp, #8
      000316 C9               [16]  730 	ret
                                    731 	.area _CODE
                                    732 	.area _INITIALIZER
                                    733 	.area _CABS (ABS)
